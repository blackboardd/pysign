import curses
from os import path
from sqlalchemy import create_engine, Table, Column,
                       Integer, String, MetaData
from getpass import getpass

def authenticate() -> Tuple[str, str]:
  """Authenticates a user through a call to fetch_creds.

  :return: Email and password from fetch_creds
  :rtype: Tuple[str, str]
  """

  return curses.initscr() |> fetch_creds

def fetch_creds(stdscr) -> Tuple[str, str]:
  """Fetches user credentials.

  Makes use of the curses package for console interaction.

  :param stdscr: window object representing the entire screen
  :return: email address and password
  :rtype: Tuple[str, str]
  """

  # Clear the window and allow echoing
  stdscr.clear()
  curses.echo()

  # Prompt the user for their email address and password
  (0, 0, "=== Authenticate yourself ===") |*> stdscr.addstr
  (1, 0, "Email: ") |*> stdscr.addstr
  email = "utf-8" |> stdscr |> .decode |> .getstr
  pw = "Password: " |> getpass$(?, None)

  return (email, pw)


def connect():
  """Initiate a connection to the SQLite database with SQLAlchemy.

  :return: sqlalchemy database engine linked to the pysign db file or null
  """

  # Absolute path hack to get SQLAlchemy to create the engine
  if "../db/pysign.db3" |> path |> .abspath |> .exists:
    engine = f"sqlite:///{db_dir}" |> create_engine$(?, future=True)

  return engine

def create_user(meta) -> Table:
  """Creates a user table using SQLAlchemy.

  columns:
  id: user id
  email: email address
  password: password

  :param meta: reference to database engine
  :type meta: Metadata
  :return: user data
  :rtype: Table
  """

  return Table("user", meta,
    "id" |> Column$(?, Integer, primary_key=True),
    "email" |> Column$(?, String, nullable=False),
    "pass" |> Column$(?, String, nullable=False),
  )


def create_words(meta) -> Table:
  """Creates a words table using SQLAlchemy.

  columns:
  id: id used in remote uri
  synonymid: id for synonyms
  name: word name
  definition: word definition
  usage: example of word use

  :param meta: reference to database engine
  :type meta: Metadata
  :return: word data
  :rtype: Table
  """

  return Table("words", meta,
    "id" |> Column$(?, Integer, primary_key=True),
    "synonymid" |> Column$(?, Integer),
    "name" |> Column$(?, String, nullable=False),
    "definition" |> Column$(?, String),
    "usage" |> Column$(?, String),
  )


def create_variants(meta) -> Table:
  """Creates a variants table using SQLAlchemy.

  columns:
  id: variant id
  html: remote uri for word variant
  vidld: remote uri for 360p video
  vidsd: remote uri for 540p video
  vidhd: remote uri for 720p video
  index: index used in remote uri
  type: sign type
  desc: variant description
  tip: combined mnemonic and notice
  word: reference to word parent

  :param meta: reference to database engine
  :type meta: Metadata
  :return: word data
  :rtype: Table
  """

  return Table("variants", meta,
    "id" |> Column$(?, Integer, primary_key=True),
    "html" |> Column$(?, String, nullable=False),
    "vidld" |> Column$(?, String, nullable=False),
    "vidsd" |> Column$(?, String, nullable=False),
    "vidhd" |> Column$(?, String, nullable=False),
    "index" |> Column$(?, Integer),
    "type" |> Column$(?, String),
    "desc" |> Column$(?, String),
    "tip" |> Column$(?, String),
    "word" |> Column$(?, Integer),
    (""ord", "words.id") |*> ForeignKeyConstraint
  )


def create_wordlists(meta, names: List[str]) -> List[Table]:
  """Creates a wordlists table using SQLAlchemy.

  columns:
  id: list id
  name: list name
  word: reference to word

  :param meta: reference to database engine
  :type meta: Metadata
  :param names: word list names
  :type names: List[str]
  :return: array of wordlist tables
  :rtype: List[Table]
  """

  wordlists: List[str]
  for name in names:
    Table(name, meta,
      "id" |> Column$(?, Integer, primary_key=True),
      "name" |> Column$(?, String),
      ("word", "words.id") |*> ForeignKeyConstraint
    ) |> wordlists.append

    return wordlists


def create(engine) -> None:
  """Creates a database for use with pysign.

  :param engine: database engine
  :return: no value
  :rtype: none
  """

  "Creating database..." |> print
  meta = MetaData()

  # Create tables for database
  user = create_user <| meta
  words = create_words <| meta
  variants = create_variants <| meta
  wordlists = create_wordlists <*| (meta, remote.get_wordlists())

  # Save database construction
  engine |> meta.create_all
