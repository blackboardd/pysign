"""This module is used for connecting to and creating the database for pySign"""

try:
    import curses
except ImportError:
    console

import logging
from os import path
from sqlalchemy importb Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session
import re
from sqlalchemy.dialects.sqlite import DATE

from getpass import getpass

base = declarative_base()

def authenticate() -> Tuple[str, str]:
  """Authenticates a user through a call to fetch_creds.

  Returns:
    Email and password from fetch_creds

  """

  return curses.initscr() |> fetch_creds


def fetch_creds(stdscr) -> Tuple[str, str]:
  """Fetches user credentials.

  Note:
    Makes use of the curses package for console interaction.

  Args:
    stdscr: Window object representing the entire screen.

  Returns:
    Email address and password.

  """

  "Authenticating user..." |> logging.info

  # Clear the window and allow echoing
  stdscr.clear()
  curses.echo()

  # Prompt the user for their email address and password
  (0, 0, "=== Authenticate yourself ===") |*> stdscr.addstr
  (1, 0, "Email: ") |*> stdscr.addstr

  try:
    email = "utf-8" |> stdscr |> .decode |> .getstr
  except ValueError:
    "Failed to retrieve email address." |> logging.critical

  try:
    pw = "Password: " |> getpass$(?, None)
  except ValueError:
    "Failed to retrieve password." |> logging.critical

  return (email, pw)


class User(Base):
  """Creates a user table using SQLAlchemy.

  Note:
    Not required if user does not wish to have access
    to extra fields or mature signs and some word lists.

  Args:
    user_email (str): SigningSavvy email address.
    user_pass (str): SigningSavvy password.

  Attributes:
    user_email (str): SigningSavvy email address.
    user_pass (str): SigningSavvy password.

  """

  __tablename__ = "user"

  user_id = Column(Integer, primary_key=True)
  user_email = Column(String, nullable=False)
  user_pass = Column(String, nullable=False)


  def __init__(self, user_email, user_pass):
    self.user_email = user_email
    self.user_pass = user_pass


class Word(Base):
  """Creates a word table using SQLAlchemy.

  Args:
    word_id (number): ID used in remote URI.
    synoynm_id (number): ID for synonyms.
    word_name (str): Word name.
    word_definition (str): Word definition.
    word_usage (str): Example of word use.

  Attributes:
    word_id (number): ID used in remote URI.
    synoynm_id (number): ID for synonyms.
    word_name (str): Word name.
    word_definition (str): Word definition.
    word_usage (str): Example of word use.

  """

  __tablename__ = "word"

  word_id = Column(Integer, primary_key=True)
  synoynm_id = Column(Integer, nullable=False)
  word_name = Column(String, nullable=False)
  word_definition = Column(String, nullable=False)
  word_usage = Column(String)


  def __init__(self, word_id, synonym_id, name, definition, usage):
    self.word_id = word_id
    self.synonym_id = synonym_id
    self.name = name

    self.definition = usage


class Variant(Base):
  """Creates a variant table using SQLAlchemy.

  Args:
    variant_uri (str): Remote URI for word variant.
    variant_vidld (str): Remote URI for 360p video.
    variant_vidsd (str): Remote URI for 540p video.
    variant_vidhd (str): Remote URI for 720p video.
    variant_index (number): Index used in remote URI.
    variant_type (str): Sign type.
    variant_desc (str): Variant description.
    variant_tip (str): Combined mnemonic and notice.
    word_id (number): Reference to the word.

  Attributes:
    variant_uri (str): Remote URI for word variant.
    variant_vidld (str): Remote URI for 360p video.
    variant_vidsd (str): Remote URI for 540p video.
    variant_vidhd (str): Remote URI for 720p video.
    variant_index (number): Index used in remote URI.
    variant_type (str): Sign type.
    variant_desc (str): Variant description.
    variant_tip (str): Combined mnemonic and notice.
    word_id (number): Reference to the word.

  """

  __tablename__ = "variant"

  variant_id = Column(Integer, primary_key=True)
  variant_uri = Column(String, nullable=False)
  variant_vidld = Column(String, nullable=False)
  variant_vidsd = Column(String, nullable=False)
  variant_vidhd = Column(String, nullable=False)
  variant_index = Column(Integer, nullable=False)
  variant_type = Column(String)
  variant_desc = Column(String)
  variant_tip = Column(String)
  word_id = Column(Integer, ForeignKey("word.word_id"))


  def __init__(self, variant_uri, variant_vidld, variant_vidsd, variant_vidhd,
    variant_index, variant_type, variant_desc, variant_tip, word_id):
    self.variant_uri = variant_uri
    self.variant_vidld = variant_vidld
    self.variant_vidsd = variant_vidsd
    self.variant_vidhd = variant_vidhd
    self.variant_index = variant_index
    self.variant_type = variant_type
    self.variant_desc = variant_desc
    self.variant_tip = variant_tip
    self.word_id = word_id


class WordList(Base):
  """Creates a word list table using SQLAlchemy.

  Args:
    word_list_name (str): Name of the word_list.
    word_id (number): Reference to the word.

  Attributes:
    word_list_name (str): Name of the word_list.
    word_id (number): Reference to the word.

  """

  __tablename__ = "wordlist"

  word_list_id = Column(Integer, primary_key=True)
  word_list_name = Column(String)
  word_id = Column(Integer, ForeignKey("word.word_id"))


  def __init__(self, word_list_name, word_id):
    self.word_list_name = word_list_name
    self.word_id = word_id


class Sentence(Base):
  """Creates a sentence table using SQLAlchemy.

  Args:
    sentence (str): Sentence.
    description (str): Description of the sentence.

  Attributes:
    sentence (str): Sentence.
    description (str): Description of the sentence.

  """

  __tablename__ = "sentence"

  sentence_id = Column(Integer, primary_key=True)
  sentence = Column(String)
  description = Column(String)


  def __init__(self, sentence, description):
    self.sentence = sentence
    self.description = description


class SentenceList(Base):
  """Creates a sentence list table using SQLAlchemy.

  Args:
    sentence_list_name (str): Name of the sentence list.
    sentence_id (number): Reference to the sentence.

  Attributes:
    wordlist_name (str): Name of the wordlist.
    word_id (number): Reference to the word.

  """

  __tablename__ = "sentencelist"

  sentence_list_id = Column(Integer, primary_key=True)
  sentence_list_name = Column(String)
  sentence_id = Column(Integer, ForeignKey("sentence.sentence_id"))


  def __init__(self, sentence_list_name, sentence_id):
    self.sentence_list_name = sentence_list_name
    self.sentence_id = sentence_id


class SentenceGlossary(Base):
  """Creates a sentence glossary table using SQLAlchemy.

  Args:
    sentence_id (number): Reference to a sentence.
    word_id (number): Reference to a word.

  Attributes:
    sentence_id (number): Reference to a sentence.
    word_id (number): Reference to a word.

  """

  __tablename__ = "sentenceglossary"

  sentence_id = Column(Integer, ForeignKey("sentence.sentence_id"))
  word_id = Column(Integer, ForeignKey("word.word_id"))


  def __init__(self, sentence_id, word_id):
    self.sentence_id = sentence_id
    self.word_id = word_id


class Article(Base):
  """Creates an article table using SQLAlchemy.

  Args:
    article_id (number): ID used in remote URI.
    author_name (str): Full name of article author.
    date (str): Article date.
    html (str): Full HTML content for article.

  Attributes:
    article_id (number): ID used in remote URI.
    author_name (str): Full name of article author.
    date (str): Article date.
    html (str): Full HTML content for article.

  """

  __tablename__ = "article"

  article_id = Column(Integer, primary_key=True)
  author_name = Column(String)
  date = Column(String)
  html = Column(String, nullable=False)


  def __init__(self, article_id, author_name, date, html):
    self.article_id = article_id
    self.author_name = author_name
    self.date = date
    self.html = html


def connect():
  """Initiate a connection to the SQLite database with SQLAlchemy.

  Returns:
    SQLAlchemy database engine linked to the db file or null.

  """ 

  "Connecting to database..." |> logging.info

  # Absolute path hack to get SQLAlchemy to create the engine
  if "../db/pysign.db3" |> path |> .abspath |> .exists:
    engine = f"sqlite:///{db_dir}" |> create_engine$(?, future=True)

  return engine


def create_session(engine) -> Session:
  """Creates a database for use with `pysign`.

  Returns:
    engine: database engine

  """

  "Connecting to database..." |> logging.info

  engine |> Base.metadata.create_all
  session = engine |> Session

  return session

def create_all(session: Session) -> None:
  """Uses a Session to create all of the data needed to fill the database.

  """

  
