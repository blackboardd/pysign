"""Module for connecting to the remote server

This module is used for attaching a connection
to act as an API for SigningSavvy.

"""

from bs4 import BeautifulSoup as soup
import logging

from sqlalchemy.orm import Session as SQLSession
from requests import Session as rSession
from sqlalchemy import select
from pysign import db
from pathlib import Path

base = "https://www.signingsavvy.com" |> Path

def getPayload(s: SQLSession) -> dict:
  """Gets payload headers for the request session.

  Args:
    s: SQLSession for querying the database.

  Attributes:
    Email address and password.

  Returns:
    Dictionary containing header data.

  """

  "Fetching payload from database." |> logging.info

  email = User.user_email |> select |> s.execute
  pw = User.user_pass |> select |> s.execute

  return {
    'action': 'login',
    'username': email,
    'password': pw,
    'login': 1,
    'search': '',
    'find': 1
  }


def connect() -> rSession:
  """Establishes a connection to SigningSavvy.

  Note:
    A request session is used to keep login information
    valid across multiple requests.

  Returns:
    session: Request session object with payload headers.

  """

  "Setting up request session..." |> logging.info

  session = requests.Session()
  db.connect |> db.create_session |> getPayload |> session.headers.update

  return session

s = connect()

def getHTML(uri: str):
  """Generalized function for getting html from a URI.

  Args:
    uri: URI to request from.

  Returns:
    html: The parsed HTML from the response text.

  """

  f"Getting HTML from {uri}" |> logging.info

  r = base / uri |> s.get
  html = r.text |> soup$(?, "html.parser")
  document.querySelectorAll("div.desc")[0].innerHTML.match("being signed")

  return html

def getHrefs(uri: str, query: str):
  """Generalized function for getting links.

  Args:
    query: HTML query to select links.

  Returns:
    links: Links specific to those being looked for.

  """

  html = uri |> getHTML

  f"Using the {query} query on HTML." |> logging.info

  hrefs = (query |> html.find_all) |> map$(? |> .href)

  return hrefs


def createWord(html: str, uri: str):
  """Create a word through its insertion into the database.

  Args:
    html: HTML to pull word data from.
    uri: URI to pull additional word data from.

  """

  "Inserting word data from {uri} into database..." |> logging.info
  f"Working off matches found from the {uri} for VALUES of insertion."
    |> logging.info

  # Regex on URI for word id.
  word_id_re = r"\d+(?=\/)(?<!\/)" |> re.search$(?, uri)
  word_id = word_id_re.group |> .$[0]

  # Parsing HTML with BeautifulSoup.
  f"Working off HTML data from the {uri} for VALUES of insertion."
    |> logging.info

  detail = Detail("div#tab-details" |> html.find_all)
  word_name = "fa-pencil" |> detail.getDetail
  word_usage = "fa-film" |> detail.getDetail
  synonyms = "fa-tags" |> detail.getDetail

  variants = (".fa-cubes + div>ul>li>a" |> tab_details.find_all |> .length) - 1

  for index in range(variants):
    uri_without_variant = uri |> .$[-1]
    video_uri = ".videocontent>link" |> html.find |> .href

    video_file_re = r"(?!\/)\d+(?=[\/.])" |> re.search$(?, video_uri)
    video_group, video_id = word_id_re.group |> .$[0:1] 
    video_file_partial = f"{video_group}/{video_id}"

    variant_vidld = base / "media" / "mp4-ld" / f"{video_file_partial}.mp4"
    variant_vidsd = base / "media" / "mp4-sd" / f"{video_file_partial}.mp4"
    variant_vidhd = base / "media" / "mp4-hd" / f"{video_file_partial}.mp4"
    
    variant_type = detail.getDetail("fa-hand-paper-o")
    variant_desc = detail.getDetail("fa-info-circle")
    variant_aid = detail.getDetail("icon-eyeglasses")
    variant_notice = detail.getDetail("fa-exclamation-triangle")
    variant_tip = f"{variant_aid}\n{variant_notice}"

    uri = "{uri_without_variant}{index + 1}"
    html = uri |> getHTML
    detail = Detail(html.find_all("div#tab-details"))


class Detail():
  static tabDetails

  def __init__(self, html):
    self.tabDetails = html

  def getDetail(icon: str):
    return self.tab_details.find(f".{icon} + div>p").innerText ?? ""


def getWords():
  "Getting words from SigningSavvy" |> logging.info

  letterHrefs = ("search", "a.wlbutton") |*> getHrefs

  for href in letterHrefs:
    wordHrefs = (href, "div.search_results>ul>li>a") |*> getHrefs

    for href in wordHrefs:
      link |> createWord

